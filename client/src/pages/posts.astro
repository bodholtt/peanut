---
import PostCard from "../components/PostCard.astro";
import PostsLayout from "../layouts/PostsLayout.astro";
import type {PostThumb, PostThumbs} from "../global/types";

// GET LIMIT AND OFFSET QUERIES
const limit = Number(Astro.url.searchParams.get('limit'));
let offset = Number(Astro.url.searchParams.get('offset'));
let queries = [];
if (limit) queries.push(`limit=${limit}`);
if (offset) queries.push(`offset=${offset}`);
let url = `${import.meta.env.API_URL}/posts`;
if (queries) url += `?${queries.join('&')}`;


// GET POST THUMBNAILS FROM API
const token = Astro.cookies.get("token");
let headers = {}
if (token) headers = { "Authorization": `Bearer ${token?.value}` }
const response = await fetch(url, headers);
const data = await response.json();

if (data.error) {
    // you should do something
}

const postDetails: PostThumbs = data.body;
let posts: PostThumb[];

if (postDetails) posts = postDetails.Thumbs;

if (posts) posts.sort((a,b) => (Number(a.id) < Number(b.id)? 1 : -1));

// CALCULATE PAGE NUMBER
let pageNum = 1;
if (limit && offset > 0) {
    pageNum = Math.floor( offset / limit) + 1;
}
if (!limit && offset) {
    // No set limit -> assume 50
    pageNum = Math.floor( offset / 50) + 1;
}

// CALCULATE LINKS FOR PAGINATION
const pcresponse = await fetch(`${import.meta.env.API_URL}/postCount`);
const postCount = await pcresponse.json();
const limitNum = limit? Number(limit) : 50;
if (!offset) offset = 0;

let params = Astro.url.searchParams;
const firstpageoffset = 0;
params.set("offset", firstpageoffset.toString());
const firstpagelink = `/posts?${params}`;

let prevpageoffset =  offset - limitNum;
if (prevpageoffset < 0) prevpageoffset = 0;
params.set("offset", prevpageoffset.toString());
const prevpagelink = `/posts?${params}`;

let nextpageoffset = offset + limitNum
if (nextpageoffset >= postCount) nextpageoffset = offset;
params.set("offset", nextpageoffset.toString());
const nextpagelink = `/posts?${params}`;

let lastpageoffset = postCount - ((postCount - limitNum) % limitNum);
if (lastpageoffset >= postCount) lastpageoffset -= limitNum;
if (lastpageoffset <= 0) lastpageoffset = offset;
params.set("offset", lastpageoffset.toString());
const lastpagelink = `/posts?${params}`;

---
<PostsLayout title="posts">
    <section class="grid cols-auto-1fr overflow-hidden">

    <section class="w-56 border-r-gray-600 p-4" slot="sidebar">
        <label>
            <input type="text" class="w-full" placeholder="enter tags..."/>
        </label>
        <hr class="my-2"/>
        <p>tag</p>
        <p>tag</p>
        <p>tag</p>
        <p>tag</p>
    </section>

    <section class="flex flex-col h-full justify-between overflow-y-auto">
        <div class="flex gap-2 p-4 h-full flex-row flex-wrap overflow-y-auto content-start border-l border-b border-twcolor-950 shadow-twcolor-800 shadow-inner">
        {posts ? posts.map(post => (
                        <PostCard postThumb={post} />
        )) :
        <p>No posts found</p>}
        </div>
        <div class="flex flex-row gap-4 justify-center items-center py-12">

            { firstpageoffset != offset ?
                    <a href={firstpagelink} class="paginationlink">&#x21e4;</a> :
                    <p class="text-gray-500">&#x21e4;</p>
            }

            { prevpageoffset != offset ?
                    <a href={prevpagelink} class="paginationlink">&#x2190;</a> :
                    <p class="text-gray-500">&#x2190;</p>
            }

            <label>
                <input type="number"
                       id="pagenumber"
                       class="text-twcolor-950 h-4 w-16 resize-none text-center bg-transparent font-bold"
                       value={pageNum}
                ></input>
            </label>

            { nextpageoffset != offset ?
                    <a href={nextpagelink} class="paginationlink">&#x2192;</a> :
                    <p class="text-gray-500">&#x2192;</p>
            }

            { lastpageoffset != offset ?
                    <a href={lastpagelink} class="paginationlink">&#x21e5;</a> :
                    <p class="text-gray-500">&#x21e5;</p>
            }
        </div>
    </section>

    </section>
</PostsLayout>

<style>
    .paginationlink {
        @apply text-twcolor-800 cursor-pointer;
    }
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
     -webkit-appearance: none;
     margin: 0;
    }
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>

<script>
    const pageNumEle = document.getElementById("pagenumber") as HTMLInputElement;

    pageNumEle!.addEventListener("change", () => {

        let url = new URL(window.location.href);
        let value = Number(pageNumEle.value);
        if (!value || value < 0) return;

        let limit = url.searchParams.get("limit");
        if (!limit) limit = "50";

        let newOffset = (value - 1) * Number(limit);
        url.searchParams.set("offset", newOffset.toString());
        window.location.href = url.href;

    });
</script>