---
import PostsLayout from "../../layouts/PostsLayout.astro";
import type {Post, Tag, User} from "../../global/types";
import { userData, userPerms } from "../../userStore";
import { getImage } from "astro:assets";
import ErrorBlock from "../../components/ErrorBlock.astro";

const { id } = Astro.params;
const titleActual = `Post ${id}`

const token = Astro.cookies.get("token");
let headers = {}
if (token) headers = { "Authorization": `Bearer ${token?.value}` }
const response = await fetch(`${import.meta.env.API_URL}/post/${id}`, headers);
if (response.status != 302) {
    // do something
}

const data = await response.json();
if (data.error) {
    // do something
}
const postDetails: Post = data.body;
if (!postDetails) {
    return new Response(null, {
        status: 404
    });
}

const uploadDate = new Date(postDetails.created_at);
const imageSrc = `${import.meta.env.STATIC_URL}${postDetails.image_path}`
// this is so that we can get the image details and prerender them in the sidebar so we don't have to do it in client-side js :3
const postImage = await getImage({src: imageSrc, inferSize: true});

let tags = postDetails.tags
let tagsText = ""
if (tags) {
    tags = tags.sort((a,b) => a.name > b.name? 1 : -1);
    tags.map(tag => {
        tagsText += tag.name + " "
    })
}

const userResponse = await fetch(`${import.meta.env.API_URL}/user/${postDetails.author_id}`);
const uData = await userResponse.json();
let author: User;
if (!uData.error) {
    author = uData.body;
} else {
    author = {
        created_at: "",
        rank: 0,
        id: 0,
        username: "anonymous"
    }
}

const isPostOwner = userData.get().UserID == author.id;
---

<PostsLayout title={titleActual}>
    <section class="grid cols-auto-1fr overflow-hidden">

    <section class="w-56 flex flex-col border-r-gray-600 p-4 overflow-y-auto">

        <h2 class="text-xl text-twcolor-950 font-bold text-center">Post {id}</h2>

        <div class="flex justify-between w-full">
            {postDetails.previous > 0 ?
                    <a href={`/post/${postDetails.previous}`} class="text-twcolor-800"> &#x2190; prev </a> :
                    <p class="text-gray-500"> &#x2190; prev </p>
            }

            <span class="text-twcolor-950">&#9733;</span>

            {postDetails.next > 0 ?
                    <a href={`/post/${postDetails.next}`} class="text-twcolor-800"> next &#x2192; </a> :
                    <p class="text-gray-500"> next &#x2192; </p>
            }
        </div>

        <br class="m-2"/>

        <div class="flex w-full justify-between">
            <p>fit: </p>
            <p class="fitclass" title="height" id="fitheight">height</p>
            <span class="text-twcolor-950">&#9733;</span>
            <p class="fitclass" title="width" id="fitwidth">width</p>
            <span class="text-twcolor-950">&#9733;</span>
            <p class="fitclass underline font-bold" title="both" id="fitboth">both</p>
        </div>
        <p>original: <span id="imageDetails">{postImage.attributes.width}x{postImage.attributes.height} {postImage.src.split('.').pop()}</span></p>
        <a href={postImage.src} class="text-twcolor-800">open image</a>

        {postDetails.source ? <a href={postDetails.source} class="text-twcolor-800">image source</a> : ''}

        <br class="m-2"/>

        <label>
            <input type="text" class="w-full" placeholder="enter tags..."/>
        </label>
        {tags && tags.map((tag) => (
            <a href={`/tags/${tag.id}`} class="text-twcolor-800">{tag.name}</a>
        ))}
        <hr class="my-2"/>

        { author.id?
                <p>Uploaded by <a href={`/user/${author.id}`} class="text-twcolor-800">{author.username}</a></p>
        :

                <p>Uploaded by {author.username}</p>
        }
        <p class="text-gray-500 text-xs">{uploadDate.toUTCString()}</p>

        {isPostOwner && userPerms.get().DeleteOwnPosts || userPerms.get().DeleteOthersPosts?
        <div class="flex items-start py-2">
            <button id="deletePost"
                    data-apiurl={import.meta.env.API_URL}
                    data-id={id}
                    class="rounded bg-twcolor-100 px-2">&#128465; Delete Post</button>
        </div>
            :
            ''
        }

    </section>

    <section class="flex flex-col gap-2 overflow-y-auto min-h-fit">

        <div id="imageouter" class="max-w-full min-h-fit h-full p-4">
            <img src={imageSrc}
                 id="image"
                 alt={`Post ${postDetails.id}`}
                 class="max-h-full max-w-full"/>
        </div>

        <hr class="mx-8 border-twcolor-950"/>

        {isPostOwner || userPerms.get().EditOthersPosts ?
        <form class="p-4 pb-16 flex flex-col w-fit items-start gap-1"
              id="changeForm"
              data-apiurl={import.meta.env.API_URL}
              data-id={id} enctype="application/x-www-form-urlencoded">

            <div id="editErrorOuter" class="hidden">
                <ErrorBlock className="">
                    <span>There was an error editing this post.</span>
                </ErrorBlock>
            </div>

            <h2 class="text-2xl">Edit post</h2>

            <label for="tagbox">Tags:</label>
            <textarea id="tagbox" name="tags" rows="4" cols="64" class="resize-x">{tagsText}</textarea>

            <label for="sourceInput">Source:</label>
            <input type="text" id="sourceInput" name="source" value={postDetails.source} class="w-full" />

            <br class="m-2"/>

            <button type="submit"
                    class="border rounded border-twcolor-950 px-2 bg-twcolor-100">Submit changes</button>

        </form> : '' }

    </section>

    </section>
</PostsLayout>

<script>
    let image = document.getElementById("image") as HTMLImageElement;
    let imageouter = document.getElementById("imageouter");
    let fitwidth = document.getElementById("fitwidth");
    let fitheight = document.getElementById("fitheight");
    let fitboth = document.getElementById("fitboth");
    let editErrorOuter = document.getElementById("editErrorOuter") as HTMLDivElement;

    const setFit = (fit: string) => {
        switch (fit) {
            // this is ugly as shit
            case "width":
                image!.className = "max-w-full";
                fitwidth!.classList.add("underline", "font-bold");
                fitheight!.classList.remove("underline", "font-bold");
                fitboth!.classList.remove("underline", "font-bold");
                imageouter!.classList.remove("h-full");
                break;
            case "height":
                image!.className = "max-h-full";
                fitwidth!.classList.remove("underline", "font-bold");
                fitheight!.classList.add("underline", "font-bold");
                fitboth!.classList.remove("underline", "font-bold");
                imageouter!.classList.add("h-full");
                break;
            case "both":
                image!.className = "max-h-full max-w-full";
                fitwidth!.classList.remove("underline", "font-bold");
                fitheight!.classList.remove("underline", "font-bold");
                fitboth!.classList.add("underline", "font-bold");
                imageouter!.classList.add("h-full");
                break;
        }
    }

    fitwidth!.addEventListener("click", () => {
        setFit("width");
    });
    fitheight!.addEventListener("click", () => {
        setFit("height");
    });
    fitboth!.addEventListener("click", () => {
        setFit("both");
    });

    const deleteButton = document.getElementById("deletePost");

    deleteButton?.addEventListener("click", async () => {
        const apiRoute: string = deleteButton.dataset.apiurl
        const postID: string = deleteButton.dataset.id

        const tokenr = await (await fetch('/gettoken')).json();
        const response = await fetch(`${apiRoute}/post/${postID}`, {
            method: 'DELETE',
            headers: {
                "Authorization": `Bearer ${tokenr}`
            }
        });
        console.log(response);

        window.location.href = "/posts";
    });

    const changeForm = document.getElementById("changeForm") as HTMLFormElement;
    const tagBox = document.getElementById("tagbox") as HTMLTextAreaElement;
    const sourceInput = document.getElementById("sourceInput") as HTMLInputElement;

    changeForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        const apiRoute: string = changeForm.dataset.apiurl
        const postID: string = changeForm.dataset.id

        const formData = new FormData(changeForm);
        console.log(formData)

        const tokenr = await (await fetch('/gettoken')).json();
        const response = await fetch(`${apiRoute}/post/${postID}`, {
                method: 'PUT',
                body: JSON.stringify({
                    tags: formData.get("tags")
                }),
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${tokenr}`
                }
            });
        console.log(response)
        if (!response.ok) {
            editErrorOuter.classList.remove("hidden");
        } else {
            window.location.reload();
        }
    });

</script>

<style>
    .fitclass {
        @apply text-twcolor-800 cursor-pointer text-center;
    }
    .fitclass::before {
        @apply font-bold block h-0 overflow-hidden;
        content: attr(title);
    }
</style>